"use client"

import type React from "react"
import { useState } from "react"
import { AlertCircle, CheckCircle, AlertTriangle, Loader2, Download, TrendingUp } from "lucide-react"
import { getRiskLevel, getRiskColor } from "@/lib/email-utils"
import { AnalysisCharts } from "./analysis-charts"
import { RiskBreakdown } from "./risk-breakdown"
import { SecurityMetrics } from "./security-metrics"

interface EmailAnalysisResult {
  email: string
  domain: string
  isPhishing: boolean
  riskScore: number
  trustScore: number
  legitimacyScore: number
  securityScore: number
  indicators: {
    category: string
    items: string[]
    severity: "low" | "medium" | "high"
  }[]
  domainAnalysis: {
    age: string
    reputation: string
    isPopular: boolean
    suspiciousPatterns: string[]
  }
  recommendations: string[]
  riskFactors: {
    name: string
    weight: number
    detected: boolean
  }[]
}

export function EmailAnalyzer() {
  const [email, setEmail] = useState("")
  const [result, setResult] = useState<EmailAnalysisResult | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")

  const handleAnalyze = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setLoading(true)

    try {
      const response = await fetch("/api/analyze", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      })

      if (!response.ok) throw new Error("Analysis failed")

      const data = await response.json()
      setResult(data)
    } catch (err) {
      setError("Failed to analyze email. Please try again.")
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  const handleExportPDF = () => {
    if (!result) return

    const content = `
TrueMail Email Analysis Report
==============================

Email Address: ${result.email}
Domain: ${result.domain}

RISK ASSESSMENT
===============
Risk Score: ${result.riskScore}%
Trust Score: ${result.trustScore}%
Legitimacy Score: ${result.legitimacyScore}%
Security Score: ${result.securityScore}%

Verdict: ${result.isPhishing ? "⚠️ PHISHING DETECTED" : "✓ APPEARS LEGITIMATE"}
Risk Level: ${getRiskLevel(result.riskScore)}

INDICATORS FOUND
================
${
  result.indicators.length > 0
    ? result.indicators
        .map((ind) => `${ind.category} (${ind.severity}):\n${ind.items.map((item) => `  - ${item}`).join("\n")}`)
        .join("\n\n")
    : "No suspicious indicators found"
}

DOMAIN ANALYSIS
===============
Reputation: ${result.domainAnalysis.reputation}
Suspicious Patterns: ${result.domainAnalysis.suspiciousPatterns.length > 0 ? result.domainAnalysis.suspiciousPatterns.join(", ") : "None"}

RECOMMENDATIONS
===============
${result.recommendations.map((rec) => `• ${rec}`).join("\n")}

Generated by TrueMail - AI Email Security
    `.trim()

    const element = document.createElement("a")
    element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(content))
    element.setAttribute("download", `email-analysis-${Date.now()}.txt`)
    element.style.display = "none"
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  return (
    <section className="pt-20 sm:pt-24 md:pt-32 pb-12 sm:pb-16 md:pb-20 px-3 sm:px-4 md:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-2 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
          Email Address Analyzer
        </h1>
        <p className="text-sm sm:text-base text-muted-foreground mb-6 sm:mb-8">
          Analyze any email address to detect phishing risks and security threats
        </p>

        <div className="grid lg:grid-cols-3 gap-6 md:gap-8">
          {/* Input Form */}
          <div className="lg:col-span-1">
            <form onSubmit={handleAnalyze} className="space-y-4">
              <div>
                <label className="block text-xs sm:text-sm font-semibold mb-2">Email Address</label>
                <input
                  type="email"
                  placeholder="Enter email address..."
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-3 sm:px-4 py-2.5 sm:py-3 rounded-lg bg-card border border-border text-foreground placeholder-muted-foreground focus:outline-none focus:border-primary transition-colors text-sm sm:text-base"
                />
              </div>

              {error && (
                <div className="p-3 sm:p-4 rounded-lg bg-destructive/10 border border-destructive/50 text-destructive flex items-start gap-2 text-xs sm:text-sm">
                  <AlertCircle className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0 mt-0.5" />
                  <span>{error}</span>
                </div>
              )}

              <button
                type="submit"
                disabled={loading || !email}
                className="w-full px-4 sm:px-6 py-2.5 sm:py-3 rounded-lg bg-primary text-primary-foreground font-semibold hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 text-sm sm:text-base"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span className="hidden sm:inline">Analyzing...</span>
                    <span className="sm:hidden">Analyzing</span>
                  </>
                ) : (
                  <>
                    <TrendingUp className="w-4 h-4" />
                    <span className="hidden sm:inline">Analyze Email</span>
                    <span className="sm:hidden">Analyze</span>
                  </>
                )}
              </button>
            </form>

            {/* Quick Tips */}
            {!result && (
              <div className="mt-6 sm:mt-8 p-4 sm:p-6 rounded-lg bg-card border border-border">
                <h3 className="font-semibold mb-3 text-xs sm:text-sm">How it works:</h3>
                <ul className="space-y-2 text-xs sm:text-sm text-muted-foreground">
                  <li className="flex gap-2">
                    <span className="text-primary flex-shrink-0">1.</span>
                    <span>Enter any email address</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-primary flex-shrink-0">2.</span>
                    <span>AI analyzes domain & patterns</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-primary flex-shrink-0">3.</span>
                    <span>Get comprehensive risk report</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-primary flex-shrink-0">4.</span>
                    <span>Export results as PDF</span>
                  </li>
                </ul>
              </div>
            )}
          </div>

          {/* Results */}
          <div className="lg:col-span-2">
            {result ? (
              <div className="space-y-4 sm:space-y-6">
                {/* Risk Score Card */}
                <div className="p-4 sm:p-6 rounded-lg bg-card border border-border">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-base sm:text-lg font-semibold">Risk Assessment</h3>
                    {result.isPhishing ? (
                      <AlertTriangle className="w-5 h-5 sm:w-6 sm:h-6 text-destructive flex-shrink-0" />
                    ) : (
                      <CheckCircle className="w-5 h-5 sm:w-6 sm:h-6 text-green-500 flex-shrink-0" />
                    )}
                  </div>

                  <div className="mb-4">
                    <div className="flex items-end justify-between mb-2">
                      <span className="text-xs sm:text-sm text-muted-foreground">Risk Score</span>
                      <span className={`text-2xl sm:text-3xl font-bold ${getRiskColor(result.riskScore)}`}>
                        {result.riskScore}%
                      </span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2.5 sm:h-3">
                      <div
                        className={`h-2.5 sm:h-3 rounded-full transition-all ${
                          result.riskScore < 20
                            ? "bg-green-500"
                            : result.riskScore < 40
                              ? "bg-blue-500"
                              : result.riskScore < 60
                                ? "bg-yellow-500"
                                : result.riskScore < 80
                                  ? "bg-orange-500"
                                  : "bg-red-500"
                        }`}
                        style={{ width: `${result.riskScore}%` }}
                      />
                    </div>
                  </div>

                  <div className="p-3 rounded-lg bg-background/50">
                    <p className="text-xs sm:text-sm font-semibold">
                      {result.isPhishing ? (
                        <span className="text-destructive">⚠️ PHISHING DETECTED</span>
                      ) : (
                        <span className="text-green-500">✓ Appears Legitimate</span>
                      )}
                    </p>
                    <p className="text-xs text-muted-foreground mt-1">
                      Risk Level: <span className="font-semibold">{getRiskLevel(result.riskScore)}</span>
                    </p>
                  </div>
                </div>

                {/* Security Metrics */}
                <SecurityMetrics result={result} />

                {/* Analysis Charts */}
                <AnalysisCharts result={result} />

                {/* Risk Breakdown */}
                <RiskBreakdown result={result} />

                {/* Indicators */}
                {result.indicators.length > 0 && (
                  <div className="p-4 sm:p-6 rounded-lg bg-card border border-border">
                    <h3 className="font-semibold mb-4 text-sm sm:text-base">Threat Indicators</h3>
                    <div className="space-y-3">
                      {result.indicators.map((indicator, i) => (
                        <div key={i} className="p-3 rounded-lg bg-background/50 border border-border/50">
                          <div className="flex items-center gap-2 mb-2 flex-wrap">
                            <span
                              className={`text-xs font-semibold px-2 py-1 rounded ${
                                indicator.severity === "high"
                                  ? "bg-destructive/20 text-destructive"
                                  : indicator.severity === "medium"
                                    ? "bg-yellow-500/20 text-yellow-600"
                                    : "bg-blue-500/20 text-blue-600"
                              }`}
                            >
                              {indicator.severity.toUpperCase()}
                            </span>
                            <span className="text-xs sm:text-sm font-semibold">{indicator.category}</span>
                          </div>
                          <ul className="space-y-1">
                            {indicator.items.map((item, j) => (
                              <li key={j} className="text-xs sm:text-sm text-muted-foreground flex gap-2">
                                <span className="text-primary flex-shrink-0">•</span>
                                <span>{item}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Recommendations */}
                <div className="p-4 sm:p-6 rounded-lg bg-card border border-border">
                  <h3 className="font-semibold mb-4 text-sm sm:text-base">Recommendations</h3>
                  <ul className="space-y-3">
                    {result.recommendations.map((rec, i) => (
                      <li key={i} className="flex items-start gap-3 text-xs sm:text-sm">
                        <span className="text-accent mt-0.5 flex-shrink-0">→</span>
                        <span className="text-muted-foreground">{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Export Button */}
                <button
                  onClick={handleExportPDF}
                  className="w-full px-4 sm:px-6 py-2.5 sm:py-3 rounded-lg border border-primary/50 text-primary font-semibold hover:bg-primary/10 transition-colors flex items-center justify-center gap-2 text-sm sm:text-base"
                >
                  <Download className="w-4 h-4" />
                  <span className="hidden sm:inline">Export Report</span>
                  <span className="sm:hidden">Export</span>
                </button>
              </div>
            ) : (
              <div className="p-8 sm:p-12 rounded-lg bg-card border border-border border-dashed text-center">
                <AlertCircle className="w-10 h-10 sm:w-12 sm:h-12 text-muted-foreground mx-auto mb-4 opacity-50" />
                <p className="text-xs sm:text-sm text-muted-foreground">
                  {loading ? "Analyzing email address..." : "Enter an email address to get started"}
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </section>
  )
}
